{"version":3,"sources":["modules/users.ts","App.tsx","components/Menu.tsx","reportWebVitals.ts","modules/index.ts","index.tsx"],"names":["getUserSaga","userSaga","GET_USERS_PENDING","GET_USERS_SUCCESS","GET_USERS_FAILURE","GET_USER","GET_USER_SUCCESS","GET_USER_FAILURE","getUsersFailure","payload","type","error","getUsers","dispatch","a","axios","get","response","data","getUser","id","getUserById","action","call","put","takeEvery","initialState","users","user","loading","state","RedPage","loadable","BluePage","UsersPage","App","path","component","Menu","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","window","__PRELOADED_STATE__","applyMiddleware","ReduxThunk","Root","run","root","document","getElementById","loadableReady","ReactDOM","hydrate"],"mappings":"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","file":"static/js/main.ba0cd857.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { call, put, takeEvery } from 'redux-saga/effects';\r\n\r\nconst GET_USERS_PENDING = 'users/GET_USERS_PENDING' as const;\r\nconst GET_USERS_SUCCESS = 'users/GET_USERS_SUCCESS' as const;\r\nconst GET_USERS_FAILURE = 'users/GET_USERS_FAILURE' as const;\r\n\r\nconst GET_USER = 'users/GET_USER' as const;\r\nconst GET_USER_SUCCESS = 'users/GET_USER_SUCCESS' as const;\r\nconst GET_USER_FAILURE = 'users/GET_USER_FAILURE' as const;\r\n\r\nconst getUsersPending = () => ({ type: GET_USERS_PENDING });\r\nconst getUsersSuccess = (payload: any) => ({ type: GET_USERS_SUCCESS, payload });\r\nconst getUsersFailure = (payload: any) => ({ type: GET_USERS_FAILURE, payload, error: true });\r\n\r\nexport const getUsers = () => async (dispatch: Dispatch) => {\r\n  dispatch(getUsersPending());\r\n  try {\r\n    const response = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n    dispatch(getUsersSuccess(response.data));\r\n  } catch (e) {\r\n    dispatch(getUsersFailure(e));\r\n    throw e;\r\n  }\r\n};\r\n\r\nexport const getUser = (id: number) => ({ type: GET_USER, payload: id });\r\nexport const getUserSuccess = (data: any) => ({ type: GET_USER_SUCCESS, payload: data });\r\nexport const getUserFailure = (error: any) => ({ type: GET_USER_FAILURE, payload: error, error: true });\r\n\r\nconst getUserById = (id: number) => axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\nfunction* getUserSaga(action: any) {\r\n  try {\r\n    const response: { data: IUser } = yield call(getUserById, action.payload);\r\n    yield put(getUserSuccess(response.data));\r\n  } catch (e) {\r\n    yield put(getUserFailure(e));\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeEvery(GET_USER, getUserSaga);\r\n}\r\n\r\nexport interface IUser {\r\n  id: number;\r\n  name: string;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface IState {\r\n  users: null | IUser[];\r\n  user: null | IUser;\r\n  loading: {\r\n    users: boolean;\r\n    user: boolean;\r\n  };\r\n  error: {\r\n    users: any;\r\n    user: any;\r\n  };\r\n}\r\n\r\ntype Action =\r\n  | ReturnType<typeof getUsersPending>\r\n  | ReturnType<typeof getUsersSuccess>\r\n  | ReturnType<typeof getUsersFailure>\r\n  | ReturnType<typeof getUser>\r\n  | ReturnType<typeof getUserSuccess>\r\n  | ReturnType<typeof getUserFailure>;\r\n\r\nconst initialState: IState = {\r\n  users: null,\r\n  user: null,\r\n  loading: {\r\n    users: false,\r\n    user: false,\r\n  },\r\n  error: {\r\n    users: null,\r\n    user: null,\r\n  },\r\n};\r\n\r\nexport function users(state: IState = initialState, action: Action) {\r\n  switch (action.type) {\r\n    case GET_USERS_PENDING:\r\n      return { ...state, loading: { ...state.loading, users: true } };\r\n    case GET_USERS_SUCCESS:\r\n      return { ...state, users: action.payload, loading: { ...state.loading, users: false } };\r\n    case GET_USERS_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: { ...state.loading, users: false },\r\n        error: { ...state.error, users: action.payload },\r\n      };\r\n    case GET_USER:\r\n      return { ...state, loading: { ...state.loading, user: true } };\r\n    case GET_USER_SUCCESS:\r\n      return { ...state, user: action.payload, loading: { ...state.loading, user: false } };\r\n    case GET_USER_FAILURE:\r\n      return { ...state, loading: { ...state.loading, user: false }, error: { ...state.error, user: action.payload } };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Route } from 'react-router-dom';\nimport loadable from '@loadable/component';\nimport Menu from './components/Menu';\n\nconst RedPage = loadable(() => import('./pages/RedPage'));\nconst BluePage = loadable(() => import('./pages/BluePage'));\nconst UsersPage = loadable(() => import('./pages/UsersPage'));\n\nfunction App() {\n  return (\n    <div>\n      <Menu />\n      <hr />\n      <Route path=\"/red\" component={RedPage} />\n      <Route path=\"/blue\" component={BluePage} />\n      <Route path=\"/users\" component={UsersPage} />\n    </div>\n  );\n}\n\nexport default App;\n","import { Link } from 'react-router-dom';\r\n\r\nfunction Menu() {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/red\">Red</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/blue\">Blue</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/users\">Users</Link>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport { users, userSaga } from './users';\r\n\r\nconst rootReducer = combineReducers({ users });\r\n\r\nexport function* rootSaga() {\r\n  yield all([userSaga()]);\r\n}\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport rootReducer, { rootSaga } from './modules';\nimport createSagaMiddleware from 'redux-saga';\nimport { loadableReady } from '@loadable/component';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  (window as any).__PRELOADED_STATE__,\n  applyMiddleware(ReduxThunk, sagaMiddleware),\n);\nsagaMiddleware.run(rootSaga);\n\nfunction Root() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nconst root = document.getElementById('root');\n\nif (process.env.NODE_ENV === 'production') {\n  loadableReady(() => {\n    ReactDOM.hydrate(<Root />, root);\n  });\n} else {\n  ReactDOM.render(<Root />, root);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}